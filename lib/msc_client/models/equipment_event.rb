=begin
#DPO-DCSATrackAndTrace-API-V2

#Provides equipment actual milestones along with Estimated Time of Arrival following DCSA standards

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module MSCClient
  class EquipmentEvent
    # The Event Type of the object
    attr_accessor :event_type

    # The event entity is described as a generalization of all the specific event categories.   An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment
    attr_accessor :description

    # The unique identifier for the Equipment Event ID/Transport Event ID/Shipment Event ID
    attr_accessor :event_id

    # The local date and time, where the event took place, in ISO 8601 format.  By default, it will be already serialized using the expected format: \"2019-11-12T07:41:00+08:30\"   https://app.swaggerhub.com/apis/dcsaorg/DCSA_TNT/2.2.0#/eventDateTime
    attr_accessor :event_date_time

    # Code for the event classifier can be  <br>ACT (Actual)</br><br>EST(Estimated)</br><br>Enum:<br>[ ACT (Actual), EST (Estimate) ]</br>
    attr_accessor :event_classifier_code

    # The local date and time, where the event took place, in ISO 8601 format.  By default, it will be already serialized using the expected format: \"2019-11-12T07:41:00+08:30\"   https://app.swaggerhub.com/apis/dcsaorg/DCSA_TNT/2.2.0#/eventDateTime
    attr_accessor :event_created_date_time

    # Unique identifier for Event Type Code for Equipment
    attr_accessor :equipment_event_type_code

    # The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.  If a container is not yet assigned to a shipment, the interface cannot return any information when an equipment reference is given as input.  If a container is assigned to an (active) shipment, the interface returns information on the active shipment
    attr_accessor :equipment_reference

    # 
    attr_accessor :iso_equipment_code

    # Code to denote whether the equipment is empty or laden
    attr_accessor :empty_indicator_code

    attr_accessor :transport_call

    # DocumentReferences
    attr_accessor :document_references

    attr_accessor :event_location

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'event_type' => :'eventType',
        :'description' => :'description',
        :'event_id' => :'eventId',
        :'event_date_time' => :'eventDateTime',
        :'event_classifier_code' => :'eventClassifierCode',
        :'event_created_date_time' => :'eventCreatedDateTime',
        :'equipment_event_type_code' => :'equipmentEventTypeCode',
        :'equipment_reference' => :'equipmentReference',
        :'iso_equipment_code' => :'ISOEquipmentCode',
        :'empty_indicator_code' => :'emptyIndicatorCode',
        :'transport_call' => :'transportCall',
        :'document_references' => :'documentReferences',
        :'event_location' => :'eventLocation'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'event_type' => :'String',
        :'description' => :'String',
        :'event_id' => :'String',
        :'event_date_time' => :'Time',
        :'event_classifier_code' => :'String',
        :'event_created_date_time' => :'Time',
        :'equipment_event_type_code' => :'String',
        :'equipment_reference' => :'String',
        :'iso_equipment_code' => :'String',
        :'empty_indicator_code' => :'String',
        :'transport_call' => :'TransportCall',
        :'document_references' => :'Array<DocumentReference>',
        :'event_location' => :'EventLocation'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Event'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MSCClient::EquipmentEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MSCClient::EquipmentEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'event_type')
        self.event_type = attributes[:'event_type']
      else
        self.event_type = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'event_id')
        self.event_id = attributes[:'event_id']
      else
        self.event_id = nil
      end

      if attributes.key?(:'event_date_time')
        self.event_date_time = attributes[:'event_date_time']
      else
        self.event_date_time = nil
      end

      if attributes.key?(:'event_classifier_code')
        self.event_classifier_code = attributes[:'event_classifier_code']
      else
        self.event_classifier_code = nil
      end

      if attributes.key?(:'event_created_date_time')
        self.event_created_date_time = attributes[:'event_created_date_time']
      else
        self.event_created_date_time = nil
      end

      if attributes.key?(:'equipment_event_type_code')
        self.equipment_event_type_code = attributes[:'equipment_event_type_code']
      end

      if attributes.key?(:'equipment_reference')
        self.equipment_reference = attributes[:'equipment_reference']
      end

      if attributes.key?(:'iso_equipment_code')
        self.iso_equipment_code = attributes[:'iso_equipment_code']
      end

      if attributes.key?(:'empty_indicator_code')
        self.empty_indicator_code = attributes[:'empty_indicator_code']
      end

      if attributes.key?(:'transport_call')
        self.transport_call = attributes[:'transport_call']
      end

      if attributes.key?(:'document_references')
        if (value = attributes[:'document_references']).is_a?(Array)
          self.document_references = value
        end
      end

      if attributes.key?(:'event_location')
        self.event_location = attributes[:'event_location']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @event_type.nil?
        invalid_properties.push('invalid value for "event_type", event_type cannot be nil.')
      end

      if @event_id.nil?
        invalid_properties.push('invalid value for "event_id", event_id cannot be nil.')
      end

      if @event_date_time.nil?
        invalid_properties.push('invalid value for "event_date_time", event_date_time cannot be nil.')
      end

      if @event_classifier_code.nil?
        invalid_properties.push('invalid value for "event_classifier_code", event_classifier_code cannot be nil.')
      end

      if @event_created_date_time.nil?
        invalid_properties.push('invalid value for "event_created_date_time", event_created_date_time cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @event_type.nil?
      return false if @event_id.nil?
      return false if @event_date_time.nil?
      return false if @event_classifier_code.nil?
      return false if @event_created_date_time.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          event_type == o.event_type &&
          description == o.description &&
          event_id == o.event_id &&
          event_date_time == o.event_date_time &&
          event_classifier_code == o.event_classifier_code &&
          event_created_date_time == o.event_created_date_time &&
          equipment_event_type_code == o.equipment_event_type_code &&
          equipment_reference == o.equipment_reference &&
          iso_equipment_code == o.iso_equipment_code &&
          empty_indicator_code == o.empty_indicator_code &&
          transport_call == o.transport_call &&
          document_references == o.document_references &&
          event_location == o.event_location
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [event_type, description, event_id, event_date_time, event_classifier_code, event_created_date_time, equipment_event_type_code, equipment_reference, iso_equipment_code, empty_indicator_code, transport_call, document_references, event_location].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MSCClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
